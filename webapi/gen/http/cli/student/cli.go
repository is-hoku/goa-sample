// Code generated by goa v3.7.6, DO NOT EDIT.
//
// student HTTP client CLI support package
//
// Command:
// $ goa gen github.com/is-hoku/goa-template/webapi/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	studentsc "github.com/is-hoku/goa-template/gen/http/students/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `students (get-student|get-students|create-student)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` students get-student --id 7416156209459211460` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		studentsFlags = flag.NewFlagSet("students", flag.ContinueOnError)

		studentsGetStudentFlags  = flag.NewFlagSet("get-student", flag.ExitOnError)
		studentsGetStudentIDFlag = studentsGetStudentFlags.String("id", "REQUIRED", "Student's unique ID")

		studentsGetStudentsFlags = flag.NewFlagSet("get-students", flag.ExitOnError)

		studentsCreateStudentFlags = flag.NewFlagSet("create-student", flag.ExitOnError)
	)
	studentsFlags.Usage = studentsUsage
	studentsGetStudentFlags.Usage = studentsGetStudentUsage
	studentsGetStudentsFlags.Usage = studentsGetStudentsUsage
	studentsCreateStudentFlags.Usage = studentsCreateStudentUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "students":
			svcf = studentsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "students":
			switch epn {
			case "get-student":
				epf = studentsGetStudentFlags

			case "get-students":
				epf = studentsGetStudentsFlags

			case "create-student":
				epf = studentsCreateStudentFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "students":
			c := studentsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-student":
				endpoint = c.GetStudent()
				data, err = studentsc.BuildGetStudentPayload(*studentsGetStudentIDFlag)
			case "get-students":
				endpoint = c.GetStudents()
				data = nil
			case "create-student":
				endpoint = c.CreateStudent()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// studentsUsage displays the usage of the students command and its subcommands.
func studentsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the students service interface.
Usage:
    %[1]s [globalflags] students COMMAND [flags]

COMMAND:
    get-student: id から学生を取得する。
    get-students: 学籍番号で昇順にソートされた全ての学生を取得する。
    create-student: 学生を登録する。

Additional help:
    %[1]s students COMMAND --help
`, os.Args[0])
}
func studentsGetStudentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] students get-student -id INT64

id から学生を取得する。
    -id INT64: Student's unique ID

Example:
    %[1]s students get-student --id 7416156209459211460
`, os.Args[0])
}

func studentsGetStudentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] students get-students

学籍番号で昇順にソートされた全ての学生を取得する。

Example:
    %[1]s students get-students
`, os.Args[0])
}

func studentsCreateStudentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] students create-student

学生を登録する。

Example:
    %[1]s students create-student
`, os.Args[0])
}
