// Code generated by goa v3.7.6, DO NOT EDIT.
//
// students endpoints
//
// Command:
// $ goa gen github.com/is-hoku/goa-template/webapi/design

package students

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "students" service endpoints.
type Endpoints struct {
	GetStudent    goa.Endpoint
	GetStudents   goa.Endpoint
	CreateStudent goa.Endpoint
}

// NewEndpoints wraps the methods of the "students" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetStudent:    NewGetStudentEndpoint(s),
		GetStudents:   NewGetStudentsEndpoint(s),
		CreateStudent: NewCreateStudentEndpoint(s),
	}
}

// Use applies the given middleware to all the "students" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetStudent = m(e.GetStudent)
	e.GetStudents = m(e.GetStudents)
	e.CreateStudent = m(e.CreateStudent)
}

// NewGetStudentEndpoint returns an endpoint function that calls the method
// "get_student" of service "students".
func NewGetStudentEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetStudentPayload)
		res, err := s.GetStudent(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudent(res, "default")
		return vres, nil
	}
}

// NewGetStudentsEndpoint returns an endpoint function that calls the method
// "get_students" of service "students".
func NewGetStudentsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.GetStudents(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudents(res, "default")
		return vres, nil
	}
}

// NewCreateStudentEndpoint returns an endpoint function that calls the method
// "create_student" of service "students".
func NewCreateStudentEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.CreateStudent(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudent(res, "default")
		return vres, nil
	}
}
