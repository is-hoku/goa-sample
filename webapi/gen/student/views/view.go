// Code generated by goa v3.7.6, DO NOT EDIT.
//
// student views
//
// Command:
// $ goa gen github.com/is-hoku/goa-sample/webapi/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Student is the viewed result type that is projected based on a view.
type Student struct {
	// Type to project
	Projected *StudentView
	// View to render
	View string
}

// Students is the viewed result type that is projected based on a view.
type Students struct {
	// Type to project
	Projected *StudentsView
	// View to render
	View string
}

// StudentView is a type that runs validations on a projected type.
type StudentView struct {
	// 学生を一意に表す ID
	ID *uint64
	// 学生の氏名
	Name *string
	// 学生の氏名のフリガナ
	Ruby *string
	// 学生の学籍番号
	StudentNumber *uint32
	// 学生の生年月日 (RFC3339)
	DateOfBirth *string
	// 学生の住所
	Address *string
	// 学生証の有効期間 (RFC3339)
	ExpirationDate *string
}

// StudentsView is a type that runs validations on a projected type.
type StudentsView struct {
	Students []*StudentView
}

var (
	// StudentMap is a map indexing the attribute names of Student by view name.
	StudentMap = map[string][]string{
		"default": {
			"id",
			"name",
			"ruby",
			"student_number",
			"date_of_birth",
			"address",
			"expiration_date",
		},
	}
	// StudentsMap is a map indexing the attribute names of Students by view name.
	StudentsMap = map[string][]string{
		"default": {
			"students",
		},
	}
)

// ValidateStudent runs the validations defined on the viewed result type
// Student.
func ValidateStudent(result *Student) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStudentView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStudents runs the validations defined on the viewed result type
// Students.
func ValidateStudents(result *Students) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStudentsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStudentView runs the validations defined on StudentView using the
// "default" view.
func ValidateStudentView(result *StudentView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Ruby == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ruby", "result"))
	}
	if result.StudentNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("student_number", "result"))
	}
	if result.DateOfBirth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date_of_birth", "result"))
	}
	if result.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "result"))
	}
	if result.ExpirationDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expiration_date", "result"))
	}
	if result.DateOfBirth != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.date_of_birth", *result.DateOfBirth, goa.FormatDateTime))
	}
	if result.ExpirationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.expiration_date", *result.ExpirationDate, goa.FormatDateTime))
	}
	return
}

// ValidateStudentsView runs the validations defined on StudentsView using the
// "default" view.
func ValidateStudentsView(result *StudentsView) (err error) {
	if result.Students == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("students", "result"))
	}
	for _, e := range result.Students {
		if e != nil {
			if err2 := ValidateStudentView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
