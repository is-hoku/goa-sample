// Code generated by goa v3.7.6, DO NOT EDIT.
//
// student endpoints
//
// Command:
// $ goa gen github.com/is-hoku/goa-sample/webapi/design

package student

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "student" service endpoints.
type Endpoints struct {
	GetStudent    goa.Endpoint
	GetStudents   goa.Endpoint
	CreateStudent goa.Endpoint
	UpdateStudent goa.Endpoint
	DeleteStudent goa.Endpoint
}

// NewEndpoints wraps the methods of the "student" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetStudent:    NewGetStudentEndpoint(s, a.JWTAuth),
		GetStudents:   NewGetStudentsEndpoint(s, a.JWTAuth),
		CreateStudent: NewCreateStudentEndpoint(s, a.JWTAuth),
		UpdateStudent: NewUpdateStudentEndpoint(s, a.JWTAuth),
		DeleteStudent: NewDeleteStudentEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "student" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetStudent = m(e.GetStudent)
	e.GetStudents = m(e.GetStudents)
	e.CreateStudent = m(e.CreateStudent)
	e.UpdateStudent = m(e.UpdateStudent)
	e.DeleteStudent = m(e.DeleteStudent)
}

// NewGetStudentEndpoint returns an endpoint function that calls the method
// "get_student" of service "student".
func NewGetStudentEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetStudentPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Authorization, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.GetStudent(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudent(res, "default")
		return vres, nil
	}
}

// NewGetStudentsEndpoint returns an endpoint function that calls the method
// "get_students" of service "student".
func NewGetStudentsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetStudentsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Authorization, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.GetStudents(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudents(res, "default")
		return vres, nil
	}
}

// NewCreateStudentEndpoint returns an endpoint function that calls the method
// "create_student" of service "student".
func NewCreateStudentEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateStudentPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Authorization, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.CreateStudent(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudent(res, "default")
		return vres, nil
	}
}

// NewUpdateStudentEndpoint returns an endpoint function that calls the method
// "update_student" of service "student".
func NewUpdateStudentEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateStudentPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Authorization, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.UpdateStudent(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStudent(res, "default")
		return vres, nil
	}
}

// NewDeleteStudentEndpoint returns an endpoint function that calls the method
// "delete_student" of service "student".
func NewDeleteStudentEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteStudentPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Authorization, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteStudent(ctx, p)
	}
}
